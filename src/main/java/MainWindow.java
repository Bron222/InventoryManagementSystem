package main.java;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author bron2
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;  // Add this import
import java.sql.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.PrintWriter;
import java.io.IOException;


public class MainWindow extends javax.swing.JFrame {
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        
        initComponents(); // creates the GUI environment
        setLocationRelativeTo(null); // centers the main JFrame bc I dont know where the code was generated lol
        initDatabase(); // connects the database
        loadProductsTableData(); // loads the initial data from database - default: Current Stock i.e. * FROM products
        
        // disconnects the database upon exiting main window
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                DatabaseUtil.closeConnection(); // closes the DB conn
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelSideMenu = new javax.swing.JPanel();
        currentStockButton = new javax.swing.JButton();
        salesButton = new javax.swing.JButton();
        purchasesButton = new javax.swing.JButton();
        suppliersButton = new javax.swing.JButton();
        reportsButton = new javax.swing.JButton();
        jPanelTop = new javax.swing.JPanel();
        jLabelMainTitle = new javax.swing.JLabel();
        jLabelSectionTitle = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanelMainBody = new javax.swing.JPanel();
        jScrollPaneDisplayTable = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bron's IMS Project");
        setBackground(new java.awt.Color(153, 204, 255));

        currentStockButton.setBackground(new java.awt.Color(153, 220, 255));
        currentStockButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentStockButton.setText("Current Stock");
        currentStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentStockButtonActionPerformed(evt);
            }
        });

        salesButton.setBackground(new java.awt.Color(153, 220, 255));
        salesButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        salesButton.setText("Sales");
        salesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesButtonActionPerformed(evt);
            }
        });

        purchasesButton.setBackground(new java.awt.Color(153, 220, 255));
        purchasesButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        purchasesButton.setText("Purchases");
        purchasesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchasesButtonActionPerformed(evt);
            }
        });

        suppliersButton.setBackground(new java.awt.Color(153, 220, 255));
        suppliersButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        suppliersButton.setText("Suppliers");
        suppliersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliersButtonActionPerformed(evt);
            }
        });

        reportsButton.setBackground(new java.awt.Color(153, 220, 255));
        reportsButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reportsButton.setText("Reports");
        reportsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSideMenuLayout = new javax.swing.GroupLayout(jPanelSideMenu);
        jPanelSideMenu.setLayout(jPanelSideMenuLayout);
        jPanelSideMenuLayout.setHorizontalGroup(
            jPanelSideMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSideMenuLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanelSideMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(salesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentStockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(suppliersButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(purchasesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addComponent(reportsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanelSideMenuLayout.setVerticalGroup(
            jPanelSideMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSideMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentStockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(salesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(purchasesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(suppliersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reportsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelMainTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelMainTitle.setText("Inventory Management System");

        jLabelSectionTitle.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabelSectionTitle.setText("Current Stock");

        addButton.setText("Add New");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        refreshButton.setBackground(new java.awt.Color(153, 220, 255));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(188, 60, 60));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTopLayout = new javax.swing.GroupLayout(jPanelTop);
        jPanelTop.setLayout(jPanelTopLayout);
        jPanelTopLayout.setHorizontalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabelSectionTitle)
                .addGap(31, 31, 31)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshButton)
                .addGap(43, 43, 43))
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addGap(336, 336, 336)
                .addComponent(jLabelMainTitle)
                .addContainerGap(646, Short.MAX_VALUE))
        );
        jPanelTopLayout.setVerticalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabelMainTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSectionTitle)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        mainTable.setName(""); // NOI18N
        mainTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mainTable.setShowGrid(false);
        jScrollPaneDisplayTable.setViewportView(mainTable);

        javax.swing.GroupLayout jPanelMainBodyLayout = new javax.swing.GroupLayout(jPanelMainBody);
        jPanelMainBody.setLayout(jPanelMainBodyLayout);
        jPanelMainBodyLayout.setHorizontalGroup(
            jPanelMainBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneDisplayTable, javax.swing.GroupLayout.PREFERRED_SIZE, 1306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMainBodyLayout.setVerticalGroup(
            jPanelMainBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainBodyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneDisplayTable, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Menu");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(164, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 52, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jPanelSideMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jPanelMainBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(jPanelTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelMainBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelSideMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //======================================= Menu Buttons' action methods ====================================
    //=======================================================================================================
    private void currentStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentStockButtonActionPerformed
        jLabelSectionTitle.setText("Current Stock");// TODO add your handling code here:
        
        // loads the data to table. it is the same as the default data when starting the app
        DefaultTableModel model = DatabaseUtil.loadProductsToTable();
        mainTable.setModel(model);
    }//GEN-LAST:event_currentStockButtonActionPerformed

    private void salesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesButtonActionPerformed
        jLabelSectionTitle.setText("Sales Transactions");// TODO add your handling code here:
        
        // loads the data to table for sales information from DB
        DefaultTableModel model = DatabaseUtil.loadSalesToTable();
        mainTable.setModel(model);
        
    }//GEN-LAST:event_salesButtonActionPerformed

    private void purchasesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchasesButtonActionPerformed
        jLabelSectionTitle.setText("Purchase Transactions");// TODO add your handling code here:
        
        // load the suppliers table from DatabaseUtil
        DefaultTableModel model = DatabaseUtil.loadPurchasesToTable();
        mainTable.setModel(model);
    }//GEN-LAST:event_purchasesButtonActionPerformed

    private void suppliersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliersButtonActionPerformed
        jLabelSectionTitle.setText("Suppliers");// TODO add your handling code here:
        
        // loads the suppliers table
        DefaultTableModel model = DatabaseUtil.loadSuppliersToTable();
        mainTable.setModel(model);
    }//GEN-LAST:event_suppliersButtonActionPerformed

    //================================== top panel ADD / EDIT buttons action methods ===============================
    //==============================================================================================================
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        
        String sectionLabelText = jLabelSectionTitle.getText(); // reads the sectionTitle to determine the appropriate action
           
        if (sectionLabelText.equals("Current Stock")) {
            // adds jFrame and opens jFrame for adding record in ProductsAddButtonFrame
            
            // set up the frame in order to make a form for adding a product to the DB
            ProductsAddButtonFrame addFrame = new ProductsAddButtonFrame();
            addFrame.setLocationRelativeTo(null);
            addFrame.setVisible(true);
            
        }
        else if (sectionLabelText.equals("Suppliers")) {
            // adds jFrame and opens jFrame for adding record in SuppliersAddButtonFrame
            SuppliersAddButtonFrame addFrame = new SuppliersAddButtonFrame();
            addFrame.setLocationRelativeTo(null);
            addFrame.setVisible(true);
        }
        else if (sectionLabelText.equals("Sales Transactions")) {
            // adds jFrame and opens jFrame for adding record in SalesAddButtonFrame
            SalesAddButtonFrame addFrame = new SalesAddButtonFrame();
            addFrame.setLocationRelativeTo(null);
            addFrame.setVisible(true);
        }
        else if (sectionLabelText.equals("Purchase Transactions")) {
            // add jFrame for PurchasesAddButtonFrame
            PurchasesAddButtonFrame addFrame = new PurchasesAddButtonFrame();
            addFrame.setLocationRelativeTo(null);
            addFrame.setVisible(true);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        // controls the edit function for each section inside corresponding if-statement
        
        // var to hold the name of the section we are in when button is pressed
        String sectionLabelText = jLabelSectionTitle.getText();
        
        if (sectionLabelText.equals("Current Stock")) {
            // add jFrame and edit record to products table
            
            int selectedRow = mainTable.getSelectedRow(); // Get selected row index
            
            
            // message if no row is selected
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a record to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // variables to hold selected record
            String productId = mainTable.getValueAt(selectedRow, 0).toString();
            String productName = mainTable.getValueAt(selectedRow, 1).toString(); 
            String category = mainTable.getValueAt(selectedRow, 2).toString();
            String price = mainTable.getValueAt(selectedRow, 3).toString();
            String stockQuantity = mainTable.getValueAt(selectedRow, 4).toString();
            String stockAlert = mainTable.getValueAt(selectedRow, 5).toString();
            String description = mainTable.getValueAt(selectedRow, 6).toString();
            String imageUrl = mainTable.getValueAt(selectedRow, 7).toString();
           
            
            // creates new window and pass the selected record data to the constructor
            ProductsEditButtonFrame editFrame = new ProductsEditButtonFrame(productId, productName, category, price, stockQuantity, stockAlert, description,
                                                                imageUrl);
            editFrame.setLocationRelativeTo(null);
            editFrame.setVisible(true);
        
        }
        if (sectionLabelText.equals("Sales Transactions")) { //==========================================
            // add jFrame and edit record to sales table and linked tables calculations
            
            int selectedRow = mainTable.getSelectedRow(); //get the row index
            
            // message if no row is selected
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a record to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // variables to hold selected record. 
            String productId = mainTable.getValueAt(selectedRow, 2).toString();
            String quantitySold = mainTable.getValueAt(selectedRow, 3).toString();
            String saleItemId = mainTable.getValueAt(selectedRow,7).toString();
            String saleSubtotal = mainTable.getValueAt(selectedRow, 4).toString();
            
            // creates new window and pass the selected record data to the constructor
            SalesEditButtonFrame editFrame = new SalesEditButtonFrame(productId, quantitySold, saleItemId, saleSubtotal);
            editFrame.setLocationRelativeTo(null);
            editFrame.setVisible(true);
        }
        
        if (sectionLabelText.equals("Purchase Transactions")) { //========================================
            // add the jFrame
            
            int selectedRow = mainTable.getSelectedRow(); // get the row index
            
            // message if no row is selected
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a record to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // variables to hold selected record.
            String supplierId = mainTable.getValueAt(selectedRow, 5).toString();
            String productId = mainTable.getValueAt(selectedRow, 2).toString();
            String quantityOrdered = mainTable.getValueAt(selectedRow,3).toString();
            String unitPrice = mainTable.getValueAt(selectedRow, 4).toString();
            String orderId = mainTable.getValueAt(selectedRow, 0).toString();
            String orderItemId = mainTable.getValueAt(selectedRow,8).toString();
            
            // form the JFrame and pass the data to the contructor of PurchasesEditButtonFrame class
            PurchasesEditButtonFrame editFrame = new PurchasesEditButtonFrame(supplierId, productId, quantityOrdered, unitPrice, orderId, orderItemId);
            editFrame.setLocationRelativeTo(null);
            editFrame.setVisible(true);
        }
        
        if (sectionLabelText.equals("Suppliers")) { //=====================================================
            // add jFrame and edit record to suppliers table
            
            int selectedRow = mainTable.getSelectedRow(); // get selected row index
            
            
            // message if no row is selected
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a record to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // variables to hold selected record
            String supplierId = mainTable.getValueAt(selectedRow, 0).toString();
            String companyName = mainTable.getValueAt(selectedRow, 1).toString(); 
            String contactName = mainTable.getValueAt(selectedRow, 2).toString();
            String phone = mainTable.getValueAt(selectedRow, 3).toString();
            String email = mainTable.getValueAt(selectedRow, 4).toString();
            String address = mainTable.getValueAt(selectedRow, 5).toString();
            
            
            // create new widow and pass the selected record data to the constructor
            SuppliersEditButtonFrame editFrame = new SuppliersEditButtonFrame(supplierId, companyName, contactName, phone, email, address);
            editFrame.setLocationRelativeTo(null);
            editFrame.setVisible(true);
        }
        
    }//GEN-LAST:event_editButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        
        // var to hold title of section for refreshing the proper section
        String title = jLabelSectionTitle.getText();
        if (title.equals("Current Stock")){
            DefaultTableModel model = DatabaseUtil.loadProductsToTable();
            mainTable.setModel(model);
        }
        else if (title.equals("Suppliers")) {
            DefaultTableModel model = DatabaseUtil.loadSuppliersToTable();
            mainTable.setModel(model);
        }
        else if (title.equals("Sales Transactions")) {
            DefaultTableModel model = DatabaseUtil.loadSalesToTable();
            mainTable.setModel(model);
        }
        else if (title.equals("Purchase Transactions")) {
            DefaultTableModel model = DatabaseUtil.loadPurchasesToTable();
            mainTable.setModel(model);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void reportsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsButtonActionPerformed
        // TODO add your handling code here:
        
        //create new report window
        ReportMenuButtonFrame reportFrame = new ReportMenuButtonFrame();
        reportFrame.setLocationRelativeTo(null);
        reportFrame.setVisible(true);
        
    }//GEN-LAST:event_reportsButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        
        String sectionLabelText = jLabelSectionTitle.getText(); // var to hold what section we are deleting from
        int selectedRow = mainTable.getSelectedRow(); // var to hold the selected record 
        
        // if no selection, show dialogue
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a record to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
        }
        
        // method adds appropriate jFrame and verfies decision, returns confirmation from user
        DeleteButtonFrame deleteFrame = new DeleteButtonFrame();
        deleteFrame.setLocationRelativeTo(null);
        deleteFrame.setVisible(true);
        // interface for listener for DeleteConfirmationListener class
        deleteFrame.setDeleteConfirmationListener(() -> {
        

        try (Connection conn = DatabaseUtil.getConnection()) {
            int rowsAffected = 0;
            // for deleting from current stock ===============================================
            if (sectionLabelText.equals("Current Stock")) {
                String productId = mainTable.getValueAt(selectedRow, 0).toString();
                String sql = "DELETE FROM products WHERE product_id = ?";
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    stmt.setInt(1, Integer.parseInt(productId));
                    rowsAffected = stmt.executeUpdate();
                }
                // for deleting from suppliers =============================================
            } else if (sectionLabelText.equals("Suppliers")) {
                String supplierId = mainTable.getValueAt(selectedRow, 0).toString();
                String sql = "DELETE FROM suppliers WHERE supplier_id = ?";
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    stmt.setInt(1, Integer.parseInt(supplierId));
                    rowsAffected = stmt.executeUpdate();
                }
                // for deleting from purchases =================================================
            } else if (sectionLabelText.equals("Purchase Transactions")) {
                int orderId = Integer.parseInt(mainTable.getValueAt(selectedRow, 0).toString()); //to reference purch order ID
                
                // get product ID and quantity sold from PurchaseOrderItems table
                String selectItemsSQL = "SELECT product_id, quantity FROM purchaseorderitems WHERE order_id = ?";
                try (PreparedStatement selectStmt = conn.prepareStatement(selectItemsSQL)) {
                    selectStmt.setInt(1, orderId); //statement being prepared
                    ResultSet rs = selectStmt.executeQuery();
                    
                    // cycle throught the result set and add data to appropriate variables
                    while (rs.next()) {
                        int productId = rs.getInt("product_id");
                        int quantity = rs.getInt("quantity");
                    
                    
                        // remove the quantity purchased from Products
                        String updateProductSQL = "UPDATE products SET stock_quantity = stock_quantity - ? WHERE product_id = ?";
                        try (PreparedStatement updateStmt = conn.prepareStatement(updateProductSQL)) {
                                updateStmt.setInt(1, quantity);
                                updateStmt.setInt(2, productId);
                                updateStmt.executeUpdate();
                        }
                    }    
                }
                // delete data from PurchaseOrderItems first
                String deleteItemSQL = "DELETE FROM purchaseorderitems WHERE order_id = ?";
                try (PreparedStatement deleteStmt = conn.prepareStatement(deleteItemSQL)) {
                    deleteStmt.setInt(1, orderId);
                    deleteStmt.executeUpdate();
                }
                
                // delete data from PurchaseOrders second
                String deleteOrderSQL = "DELETE FROM purchaseorders WHERE order_id = ?";
                try (PreparedStatement deleteStmt = conn.prepareStatement(deleteOrderSQL)) {
                    deleteStmt.setInt(1, orderId);
                    rowsAffected = deleteStmt.executeUpdate();
                }
                
            // for deleting from Sales ========================================
            } else if (sectionLabelText.equals("Sales Transactions")) {
                int saleId = Integer.parseInt(mainTable.getValueAt(selectedRow, 0).toString());

                // get product ID and quantity sold from SalesItems table
                String selectItemsSQL = "SELECT product_id, quantity FROM salesitems WHERE sale_id = ?";
                try (PreparedStatement selectStmt = conn.prepareStatement(selectItemsSQL)) {
                    selectStmt.setInt(1, saleId);
                    ResultSet rs = selectStmt.executeQuery();

                    while (rs.next()) {
                        int productId = rs.getInt("product_id");
                        int quantity = rs.getInt("quantity");

                        // add the quantity back to Products
                        String updateProductSQL = "UPDATE products SET stock_quantity = stock_quantity + ? WHERE product_id = ?";
                        try (PreparedStatement updateStmt = conn.prepareStatement(updateProductSQL)) {
                            updateStmt.setInt(1, quantity);
                            updateStmt.setInt(2, productId);
                            updateStmt.executeUpdate();
                        }
                    }
                }

                // delete data from SalesItems first
                String deleteItemsSQL = "DELETE FROM salesitems WHERE sale_id = ?";
                try (PreparedStatement deleteStmt = conn.prepareStatement(deleteItemsSQL)) {
                    deleteStmt.setInt(1, saleId);
                    deleteStmt.executeUpdate();
                }

              // delete data from Sales table second
                String deleteSaleSQL = "DELETE FROM sales WHERE sale_id = ?";
                try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSaleSQL)) {
                    deleteStmt.setInt(1, saleId);
                    rowsAffected = deleteStmt.executeUpdate();
                }
            }
            
            // --------if sucessful or error, display message------
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Record deleted.");
                refreshButton.doClick(); // to refresh the page
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete record.");
            }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        });

    }//GEN-LAST:event_deleteButtonActionPerformed
    public void refreshCurrentSection() { // for refreshing when needed in another class. NOT IN USE CURRENTLY
        refreshButton.doClick(); 
    }
//============================================================================================================================
//============================================= MAIN =========================================================================
    //========================================================================================================================
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainWindow().setVisible(true);
                } catch (Exception e) {
                    // Log to file
                    try (PrintWriter out = new PrintWriter("startup-error.log")) {
                        e.printStackTrace(out);
                    } catch (IOException io) {
                        io.printStackTrace();
                    }

                    // Show popup if GUI is available
                    javax.swing.JOptionPane.showMessageDialog(null,
                        "Startup Error:\n" + e.getMessage(),
                        "IMS Launcher",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }
//============================= variable declarations =================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton currentStockButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelMainTitle;
    private javax.swing.JLabel jLabelSectionTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelMainBody;
    private javax.swing.JPanel jPanelSideMenu;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JScrollPane jScrollPaneDisplayTable;
    private javax.swing.JTable mainTable;
    private javax.swing.JButton purchasesButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton reportsButton;
    private javax.swing.JButton salesButton;
    private javax.swing.JButton suppliersButton;
    // End of variables declaration//GEN-END:variables
    
    //=========== Database variable ===================================
    
    private static Connection connection; //Conn obj to hold conn
    
    //======================== METHOD-connect-DB ======================
    private void initDatabase() {
        try {
            connection = DatabaseUtil.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database connection failed: " + e.getMessage(),
                                            "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
    }
//=========================== METHODS-to-load-inital-data ==================================
    private void loadProductsTableData() {
        //load the products data into the default initializing table upon opening app or calling to refresh
        DefaultTableModel model = DatabaseUtil.loadProductsToTable();
        mainTable.setModel(model);
    }
    
//======================= METHODs for USER VALIDATION ======================================
    
    //takes string var and checks if integer, returns boolean
    public static boolean isAnInteger(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    //takes string var and checks if double, returns boolean
    public static boolean isADouble(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
//============================================================================================
//============================================================================================
}//===================================EOF=====================================================